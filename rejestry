library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Rejestry2 is
   port
   (
        clk : in std_logic;
        DI : in signed (15 downto 0);
        BA : in signed (15 downto 0);
        Sbb : in signed (4 downto 0);
        Sbc : in signed (4 downto 0);
        Sba : in signed (4 downto 0);
        Sid : in signed (2 downto 0);
        Sa : in signed (1 downto 0);
        BB : out signed (15 downto 0);
        BC : out signed (15 downto 0);
        ADR : out signed (31 downto 0);
        IRout : out signed (15 downto 0);
		  test_ba : in bit;
		  Hex_R : out bit_vector (27 downto 0);
		  C : out std_logic;
		  S : out std_logic;
		  Z : out std_logic;
		  P : out std_logic
		  
   );
end entity;
 
architecture rtl of Rejestry2 is

function to_7segment(input : signed(3 downto 0)) return BIT_VECTOR is
        variable segments : BIT_VECTOR(6 downto 0);
    begin
        case input is
            when "0000" => segments := "1000000";  
            when "0001" => segments := "1111001";  
            when "0010" => segments := "0100100"; 
            when "0011" => segments := "0110000";  
            when "0100" => segments := "0011001"; 
            when "0101" => segments := "0010010"; 
            when "0110" => segments := "0000010";  
            when "0111" => segments := "1111000";  
            when "1000" => segments := "0000000";  
            when "1001" => segments := "0010000"; 
            when "1010" => segments := "0001000";  
            when "1011" => segments := "0000011";  
            when "1100" => segments := "1000110"; 
            when "1101" => segments := "0100001";  
            when "1110" => segments := "0000110";  
            when "1111" => segments := "0001110";  
            when others => segments := "1111111";  
        end case;
        return segments;
    end function;

	 
	 
begin
process (clk, Sbb, Sbc, Sba, Sid, Sa, DI)
         variable IR, TMP, R1, R2, R3, R4, R5, R6, R7, R8 ,R9 ,R10, R11, R12, R13, R14, R15, R16: signed (15 downto 0);
         variable AD, PC, SP, ATMP : signed (31 downto 0);
			variable sba,sbb,sbc:signed(4 downto 0);
			variable ba,bb,bc: signed(15 downto 0);
			variable MAR, MBR : signed (15 downto 0); 
			variable carr_flag, sign_flag, zero_flag, parity_flag: std_logic;
			
			
			
			
       begin
       if (clk'event and clk='1') then
			sba:=Sba;
			sbb:=Sbb;
			sbc:=Sbc;
			ba:=BA;
			--ta sekcja jest testowa--
			sba:="00100";
			sbb:="00100";
			sbc:="00100";
			if (test_ba ='0') then ba := "0000000000000001";
			else ba := "0000000000000010";
			end if;
			
			--koniec sekcji testowej--
         case Sid is
                   when "001" =>
                       PC := PC + 1;
                   when "010" =>
                       SP := SP + 1;
                   when "011" =>
						     AD := AD + 1;
						 when "100" =>
						     SP := SP - 1;
						 when "101" =>
						     AD := AD - 1;
                   when others =>
                       null;
         end case;
         case sba is
                   when "00000" => IR := BA;
                   when "00001" => TMP := BA;
                   when "00010" => R1 := BA;
                   when "00011" => R2 := BA;
                   when "00100" => R3 := BA;
                   when "00101" => R4 := BA;
						 when "00110" => R5 := BA;
						 when "00111" => R6 := BA;
						 when "01000" => R7 := BA;
						 when "01001" => R8 := BA;
						 when "01010" => R9 := BA;
						 when "01011" => R10 := BA;
						 when "01100" => R11:= BA;
						 when "01101" => R12 := BA;
						 when "01110" => R13 := BA;
						 when "01111" => R14 := BA;
						 when "10000" => R15 := BA;
						 when "10001" => R16 := BA;
						 when "10010" => AD(31 downto 16) := BA;
						 when "10011" => AD(15 downto 0) := BA;			
						 when "10100" => ATMP(31 downto 16) := BA;
						 when "10101" => ATMP(15 downto 0) := BA;					 
						 when others =>
                       null;
         end case;
       end if;
         case sbb is
                   when "00000" => bb :=  DI;
                   when "00001" => bb := TMP;
                   when "00010" => bb := R1;
                   when "00011" => bb := R2;
                   when "00100" => bb := R3 ;
                   when "00101" => bb := R4 ;
						 when "00110" => bb := R5 ;
						 when "00111" => bb := R6 ;
						 when "01000" => bb := R7 ;
						 when "01001" => bb := R8 ;
						 when "01010" => bb := R9 ;
						 when "01011" => bb := R10 ;
						 when "01100" => bb := R11 ;
						 when "01101" => bb := R12 ;
						 when "01110" => bb := R13 ;
						 when "01111" => bb := R14 ;
						 when "10000" => bb := R15 ;
						 when "10001" => bb := R16 ;
						 when "10010" => bb := AD(31 downto 16) ;
						 when "10011" => bb := AD(15 downto 0) ;			
						 when "10100" => bb := ATMP(31 downto 16) ;
						 when "10101" => bb := ATMP(15 downto 0) ;					 
						 when others =>
                       null;
         end case;
         case sbc is
						 when "00000" => bc :=  DI;
                   when "00001" => bc := TMP;
                   when "00010" => bc := R1;
                   when "00011" => bc := R2;
                   when "00100" => bc := R3 ;
                   when "00101" => bc := R4 ;
						 when "00110" => bc := R5 ;
						 when "00111" => bc := R6 ;
						 when "01000" => bc := R7 ;
						 when "01001" => bc := R8 ;
						 when "01010" => bc := R9 ;
						 when "01011" => bc := R10 ;
						 when "01100" => bc := R11 ;
						 when "01101" => bc := R12 ;
						 when "01110" => bc := R13 ;
						 when "01111" => bc := R14 ;
						 when "10000" => bc := R15 ;
						 when "10001" => bc := R16 ;
						 when "10010" => bc := AD(31 downto 16) ;
						 when "10011" => bc := AD(15 downto 0) ;			
						 when "10100" => bc := ATMP(31 downto 16) ;
						 when "10101" => bc := ATMP(15 downto 0) ;					 
						 when others =>
                       null;
         end case;
         case Sa is
                  when "00" => ADR <= AD;
                  when "01" => ADR <= PC;
                  when "10" => ADR <= SP;
                  when "11" => ADR <= ATMP;
						when others =>
                       null;
         end case;
         IRout <= IR;
			BB:=bb;
			BC:=bc;
			Hex_R(27 downto 21)<= to_7segment(bb(7 downto 4));
			Hex_R(20 downto 14)<= to_7segment(bb(3 downto 0));
			Hex_R(13 downto 7)<= to_7segment(bc(7 downto 4));
			Hex_R(6 downto 0)<= to_7segment(bc(3 downto 0));
end process;
end rtl;
